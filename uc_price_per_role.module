<?php
// $Id$

/**
 * Implementation of hook_menu().
 */
function uc_price_per_role_menu() {
  $items = array();

  $items['admin/store/settings/price_per_role'] = array(
    'title' => 'Price per role settings',
    'description' => 'Configure price per role settings.',
    'access arguments' => array('administer store'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_price_per_role_settings_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function uc_price_per_role_theme() {
  return array(
    'uc_price_per_role_settings_form' => array(
      'file' => 'uc_price_per_role.module',
      'arguments' => array(
        'form' => NULL,
      ),
    ),
    'uc_price_per_role_product_prices' => array(
      'file' => 'uc_price_per_role.module',
      'arguments' => array(
        'prices' => NULL,
      ),
    ),
  );
}

function uc_price_per_role_settings_form() {
  $enabled = variable_get('uc_price_per_role_enabled', array());
  $weights = variable_get('uc_price_per_role_weights', array());
  $roles = user_roles();

  foreach (array_keys($roles) as $rid) {
    if (!isset($weights[$rid])) {
      $weights[$rid] = 0;
    }
  }
  asort($weights);

  $form['help'] = array(
    '#value' => t('Enable roles that require separate pricing. For users with more than one matching role, the lightest weight role that has a price available will be used.'),
  );

  $form['fields']['#tree'] = TRUE;
  foreach ($weights as $rid => $weight) {
    $form['fields'][$rid]['role'] = array(
      '#value' => $roles[$rid],
    );
    $form['fields'][$rid]['enabled'] = array(
      '#type' => 'checkbox',
      '#default_value' => $enabled[$rid],
    );
    $form['fields'][$rid]['weight'] = array(
      '#type' => 'weight',
      '#delta' => 5,
      '#default_value' => $weight,
    );
  }

  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );

  return $form;
}

function theme_uc_price_per_role_settings_form($form) {
  $output = drupal_render($form['help']);

  $header = array(t('Enable'), t('Role'), t('Weight'));
  $rows = array();
  foreach (element_children($form['fields']) as $field) {
    $row = array();
    $row[] = drupal_render($form['fields'][$field]['enabled']);
    $row[] = drupal_render($form['fields'][$field]['role']);
    $row[] = drupal_render($form['fields'][$field]['weight']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);

  $output .= drupal_render($form);
  return $output;
}

function uc_price_per_role_settings_form_submit($form, &$form_state) {
  $enabled = array();
  $weights = array();

  foreach ($form_state['values']['fields'] as $rid => $field) {
    $enabled[$rid] = $field['enabled'];
    $weights[$rid] = $field['weight'];
  }

  variable_set('uc_price_per_role_enabled', $enabled);
  variable_set('uc_price_per_role_weights', $weights);
}

/**
 * Implementation of hook_form_alter().
 */
function uc_price_per_role_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'node-form' && isset($form['base']['prices'])) {
    $enabled = variable_get('uc_price_per_role_enabled', array());
    $weights = variable_get('uc_price_per_role_weights', array());

    $form['base']['role_prices'] = array(
      '#weight' => 6,
      '#theme' => 'uc_price_per_role_product_prices',
      '#tree' => TRUE,
    );

    foreach (user_roles() as $rid => $role) {
      if ($enabled[$rid]) {
        $form['base']['role_prices'][$rid] = array(
          '#type' => 'textfield',
          '#title' => t('%role price', array('%role' => $role)),
          '#default_value' => $form['#node']->role_prices[$rid],
          '#description' => t('Purchase price for %role users.', array('%role' => $role)),
          '#size' => 20,
          '#maxlength' => 35,
          '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
          '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
        );
      }
    }
  }
}

function theme_uc_price_per_role_product_prices($prices) {
  $output = '<table><tr>';
  foreach (element_children($prices) as $rid) {
    $output .= '<td>'. drupal_render($prices[$rid]) .'</td>';
  }
  $output .= "</table>\n";
  return $output;
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_price_per_role_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  global $user;

  if (in_array($node->type, module_invoke_all('product_types'))) {
    switch ($op) {
      case 'validate':
        if (isset($node->role_prices)) {
          foreach ($node->role_prices as $rid => $price) {
            if (!empty($price) && !is_numeric($price)) {
              form_set_error('role_prices]['. $rid, t('Price must be a number.'));
            }
          }
        }
        break;

      case 'insert':
      case 'update':
        db_query("DELETE FROM {uc_price_per_role_prices} WHERE nid = %d", $node->nid);
        if (is_array($node->role_prices)) {
          foreach ($node->role_prices as $rid => $price) {
            if (is_numeric($price)) {
              db_query("INSERT INTO {uc_price_per_role_prices} (vid, nid, rid, price) VALUES (%d, %d, %d, %f)", $node->vid, $node->nid, $rid, $price);
            }
          }
        }
        break;

      case 'load':
        $result = db_query("SELECT rid, price FROM {uc_price_per_role_prices} WHERE vid = %d", $node->vid);
        $prices = array();
        while ($row = db_fetch_object($result)) {
          $prices[$row->rid] = $row->price;
        }

        // Find the price for the current role.
        $enabled = variable_get('uc_price_per_role_enabled', array());
        $weights = variable_get('uc_price_per_role_weights', array());
        asort($weights);
        foreach ($weights as $rid => $weight) {
          if (isset($user->roles[$rid]) && $enabled[$rid] && isset($prices[$rid])) {
            $node->sell_price = $prices[$rid];
            break;
          }
        }

        return array('role_prices' => $prices);

      case 'prepare':
        // Reload original price for editing.
        $node->sell_price = db_result(db_query('SELECT sell_price FROM {uc_products} WHERE vid = %d', $node->vid));
        break;

      case 'delete':
        db_query("DELETE FROM {uc_price_per_role_prices} WHERE nid = %d", $node->nid);
        break;

      case 'delete revision':
        db_query("DELETE FROM {uc_price_per_role_prices} WHERE vid = %d", $node->vid);
        break;
    }
  }
}
