<?php
/**
 * @file
 * Price per Role main module.
 *
 * Allows customers with different roles to see different prices.
 */

/**
 * Implements hook_menu().
 */
function uc_price_per_role_menu() {
  $items = array();

  $items['admin/store/settings/price_per_role'] = array(
    'title' => 'Price per role',
    'description' => 'Configure price per role settings.',
    'access arguments' => array('administer store'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('uc_price_per_role_settings_form'),
    'file' => 'uc_price_per_role.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  if (module_exists('uc_attribute')) {
    $items['node/%node/edit/option-prices'] = array(
      'title' => 'Option prices',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('uc_price_per_role_option_prices_form', 1),
      'file' => 'uc_price_per_role.admin.inc',
      'access callback' => 'uc_attribute_product_option_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 3,
    );
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function uc_price_per_role_permission() {
  return array(
    'access price selection block' => array(
      'title' => t('Access price selection block'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function uc_price_per_role_views_api() {
  return array(
    'api' => 3,
    'path' => backdrop_get_path('module', 'uc_price_per_role') . '/views',
  );
}

/**
 * Implements hook_admin_paths().
 */
function uc_price_per_role_admin_paths() {
  return array(
    'node/*/edit/option-prices' => TRUE,
  );
}

/**
 * Implements hook_menu_alter().
 */
function uc_price_per_role_menu_alter(&$items) {
  // Make room in local menu for the 'Option Prices' tab.
  if (module_exists('uc_attribute')) {
    $items['node/%node/edit/adjustments']['weight']++;
  }
  if (isset($items['node/%node/edit/features'])) {
    $items['node/%node/edit/features']['weight']++;
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function uc_price_per_role_entity_info_alter(&$entity_info) {
  // Disable node caching so that different users can see different nodes.
  $entity_info['node']['entity cache'] = FALSE;
}

/**
 * Implements hook_theme().
 */
function uc_price_per_role_theme() {
  return array(
    'uc_price_per_role_settings_form' => array(
      'file' => 'uc_price_per_role.module',
      'render element' => 'form',
    ),
    'uc_price_per_role_product_prices' => array(
      'file' => 'uc_price_per_role.module',
      'render element' => 'prices',
    ),
    'uc_price_per_role_option_prices_form' => array(
      'file' => 'uc_price_per_role.module',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function uc_price_per_role_config_info() {
  $prefixes['uc_price_per_role.settings'] = array(
    'label' => t('Price per Role settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_form_alter() for the product edit form.
 */
function uc_price_per_role_form_alter(&$form, $form_state, $form_id) {
  if (uc_product_is_product_form($form, $form_state)) {
    $enabled = config_get('uc_price_per_role.settings', 'enabled');
    $enabled_roles = array_filter($enabled);

    // If there is an enabled role, change the label on the core Ubercart sell
    // price to indicate it is now the default price.
    if (!empty($enabled_roles)) {
      $form['base']['prices']['sell_price']['#title'] =
        t('Default sell price');
      $form['base']['prices']['sell_price']['#description'] =
        t('Default customer purchase price.');
    }

    $form['base']['role_prices'] = array(
      '#weight' => 6,
      '#theme' => 'uc_price_per_role_product_prices',
      '#tree' => TRUE,
    );

    $sign_flag = config_get('uc_store.settings', 'uc_sign_after_amount');
    $currency_sign = config_get('uc_store.settings', 'uc_currency_sign');

    if (isset($form['#node']->role_prices)) {
      $role_prices = $form['#node']->role_prices;
    }

    foreach (user_roles() as $role => $role_name) {
      if (!empty($enabled[$role])) {
        $form['base']['role_prices'][$role] = array(
          '#type' => 'textfield',
          '#title' => t('%role price', array('%role' => $role_name)),
          '#required' => FALSE,
          '#default_value' => isset($role_prices[$role]) ?
            uc_store_format_price_field_value($role_prices[$role]) : '',
          '#description' => t('Purchase price for %role users.',
            array('%role' => $role_name)),
          '#size' => 15,
          '#maxlength' => 15,
          '#field_prefix' => $sign_flag ? '' : $currency_sign,
          '#field_suffix' => $sign_flag ? $currency_sign : '',
        );
      }
    }
  }
  elseif ($form_id === 'uc_object_options_form') {
    $link = l('option prices form', "node/{$form['id']['#value']}/edit/option-prices");
    $form['uc_price_per_role_note'] = array(
      '#type' => 'help',
      '#markup' => t('Note: "Price" column is the default option price. To set option prices per role use the !link.', array('!link' => $link)),
    );
  }
  elseif (strpos($form_id, 'add_to_cart_form')) {
    // Modify product form attribute option prices.
    $format = config_get('uc_attribute.settings', 'uc_attribute_option_price_format');
    if (module_exists('uc_attribute') && $format != 'none') {
      $nid = intval($form['nid']['#value']);
      $product = node_load($nid);
      if (isset($form['qty']['#value'])) {
        $qty = intval($form['qty']['#value']);
      }
      else {
        $qty = 1;
      }

      $priced_attributes = uc_attribute_priced_attributes($nid);
      $role_prices = uc_price_per_role_load_option_prices($nid);

      if (!empty($form['attributes'])) {
        foreach (element_children($form['attributes']) as $aid) {
          if (isset($form['attributes'][$aid]['#options'])) {
            $attribute = uc_attribute_load($aid, $nid, 'product');

            foreach (array_keys($form['attributes'][$aid]['#options']) as $oid) {
              if (isset($role_prices[$oid])) {
                $price = uc_price_per_role_find_price($role_prices[$oid]);
              }
              else {
                $price = FALSE;
              }

              if ($price !== FALSE) {
                switch ($format) {
                  case 'total':
                    $display_price = in_array($aid, $priced_attributes) ? ', ' . uc_currency_format(($product->sell_price + $price) * $qty) : '';
                    if (count($priced_attributes) == 1) {
                      break;
                    }
                  case 'adjustment':
                    $display_price = ($price != 0 ?
                      ', ' . ($price > 0 ? '+' : '') . uc_currency_format($price * $qty) : '');
                    break;
                }

                $form['attributes'][$aid]['#options'][$oid] =
                  $attribute->options[$oid]->name . $display_price;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Theme the role prices form area on the product edit form.
 */
function theme_uc_price_per_role_product_prices($variables) {
  $prices = $variables['prices'];
  $output = '';
  if (!empty($prices)) {
    $output .= '<table><tr>';
    foreach (element_children($prices) as $role) {
      $output .= '<td>' . backdrop_render($prices[$role]) . '</td>';
    }
    $output .= "</table>\n";
  }
  return $output;
}

/**
 * Implements hook_node_validate().
 */
function uc_price_per_role_node_validate($node, $form, &$form_state) {
  if (isset($node->role_prices)) {
    foreach ($node->role_prices as $role => $price) {
      if (!empty($price) && !is_numeric($price)) {
        form_set_error('role_prices][' . $role, t('Price must be a number.'));
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function uc_price_per_role_node_load($nodes, $types) {
  $node_array = array();

  foreach ($nodes as $node) {
    if (in_array($node->type, uc_product_types())) {
      $node->role_prices = array();
      $node_array[$node->vid] = $node;
    }
  }
  if (!empty($node_array)) {
    $result = db_query("
      SELECT vid, role, price
      FROM {uc_price_per_role_prices}
      WHERE vid IN (:vids)
      ", array(':vids' => array_keys($node_array)));
    foreach ($result as $key => $row) {
      $node_array[$row->vid]->role_prices[$row->role] = $row->price;
    }
    foreach ($node_array as $node) {
      $original_price = $node->sell_price;
      $price = uc_price_per_role_find_price($node->role_prices);
      if ($price !== FALSE) {
        $node->price = $node->sell_price = $price;
      }
      $node->roleindependent_sell_price = $original_price;
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_price_per_role_node_insert($node) {
  db_query("
    DELETE FROM {uc_price_per_role_prices}
    WHERE vid = :vid
    ", array(':vid' => $node->vid));
  if (!empty($node->role_prices)) {
    foreach ($node->role_prices as $role => $price) {
      if (is_numeric($price)) {
        db_query("
          INSERT INTO {uc_price_per_role_prices}
          (vid, nid, role, price)
          VALUES (:vid, :nid, :role, :price)",
          array(
            ':vid' => $node->vid,
            ':nid' => $node->nid,
            ':role' => $role,
            ':price' => $price,
          )
        );
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function uc_price_per_role_node_update($node) {
  db_query("
    DELETE FROM {uc_price_per_role_prices}
    WHERE vid = :vid
    ", array(':vid' => $node->vid));
  if (!empty($node->role_prices)) {
    foreach ($node->role_prices as $role => $price) {
      if (is_numeric($price)) {
        db_query("
          INSERT INTO {uc_price_per_role_prices}
          (vid, nid, role, price)
          VALUES (:vid, :nid, :role, :price)",
          array(
            ':vid' => $node->vid,
            ':nid' => $node->nid,
            ':role' => $role,
            ':price' => $price,
          )
        );
      }
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function uc_price_per_role_node_prepare($node) {
  if (isset($node->roleindependent_sell_price)) {
    // Reload original price for editing.
    $node->sell_price = $node->roleindependent_sell_price;
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_price_per_role_node_delete($node) {
  db_query("
    DELETE FROM {uc_price_per_role_prices}
    WHERE nid = :nid
    ", array(':nid' => $node->nid));
}

/**
 * Implements hook_node_revision_delete().
 */
function uc_price_per_role_node_revision_delete($node) {
  db_query("
    DELETE FROM {uc_price_per_role_prices}
    WHERE vid = :vid
    ", array(':vid' => $node->vid));
}

/**
 * Implements hook_uc_product_alter().
 */
function uc_price_per_role_uc_product_alter(&$node) {
  if (module_exists('uc_attribute')) {
    $role_prices = uc_price_per_role_load_option_prices($node->nid);
    foreach (_uc_cart_product_get_options($node) as $option) {
      $oid = $option['oid'];
      if (isset($role_prices[$oid])) {
        $price = uc_price_per_role_find_price($role_prices[$oid]);
        if ($price !== FALSE) {
          $node->price += $price - $option['price'];
        }
      }
    }
  }
}

/**
 * Load per-role option price data for the supplied node ID.
 */
function uc_price_per_role_load_option_prices($nid) {
  $prices = array();
  $result = db_query("
    SELECT oid, role, price
    FROM {uc_price_per_role_option_prices}
    WHERE nid = :nid
    ", array(':nid' => $nid));
  foreach ($result as $row) {
    $prices[$row->oid][$row->role] = $row->price;
  }
  return $prices;
}

/**
 * Find the price for the current user from the supplied price array.
 *
 * Will return FALSE if no price was found.
 */
function uc_price_per_role_find_price($prices) {
  $config = config('uc_price_per_role.settings');
  $enabled = $config->get('enabled');
  $weights = $config->get('weights');
  asort($weights);

  // Check for a chosen role in the price selection block first.
  if (isset($_SESSION['uc_price_per_role']) && $_SESSION['uc_price_per_role']['price_selection']) {
    $price_roles = $_SESSION['uc_price_per_role']['price_roles'];
    foreach ($weights as $role => $weight) {
      if (isset($price_roles[$role]) && $enabled[$role] && isset($prices[$role])) {
        return $prices[$role];
      }
    }
    return FALSE;
  }

  // Otherwise, look for a matching role among user's own roles.
  global $user;
  foreach ($weights as $role => $weight) {
    if (in_array($role, $user->roles) && $enabled[$role] && isset($prices[$role])) {
      return $prices[$role];
    }
  }
  return FALSE;
}

/**
 * Implements hook_block_info().
 */
function uc_price_per_role_block_info() {
  $blocks = array(
    array(
      'info' => t('Pricing selection'),
      'description' => t('Allows authorized users to switch between roles.'),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function uc_price_per_role_block_view($delta = 0) {
  if ($delta == 0 && user_access('access price selection block')) {
    $block = array(
      'subject' => t('Pricing Selection'),
      'content' => backdrop_get_form('uc_price_per_role_switch_form'),
    );
    return $block;
  }
}

/**
 * Form to allow authorised users to select which role(s) are used for pricing.
 */
function uc_price_per_role_switch_form($form, $form_state) {
  $config = config('uc_price_per_role.settings');
  $price_selection = (isset($_SESSION['uc_price_per_role']) &&
    $_SESSION['uc_price_per_role']['price_selection']) ? 1 : 0;
  $form['price_selection_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Price Roles: @status',
      array('@status' => ($price_selection ? t('Override') : t('Default')))),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['price_selection_fieldset']['price_selection'] = array(
    '#type' => 'radios',
    '#options' => array(
      0 => 'Default',
      1 => 'Override',
    ),
    '#default_value' => $price_selection,
    '#ajax' => array(
      'callback' => 'uc_price_per_role_switch_form_callback',
      'wrapper' => 'uc-price-per-role-price-roles',
    ),
  );

  $show_checkboxes = isset($form_state['values']['price_selection']) ?
    $form_state['values']['price_selection'] :
    $price_selection;
  if ($show_checkboxes) {
    $weights = $config->get('weights');
    $enabled = $config->get('enabled');
    $roles = user_roles();
    asort($weights);
    foreach ($weights as $role => $weight) {
      if ($enabled[$role]) {
        $weighted_roles[$role] = $roles[$role];
      }
    }
    $form['price_selection_fieldset']['price_roles'] = array(
      '#prefix' => '<div id="uc-price-per-role-price-roles">',
      '#suffix' => '</div>',
      '#type' => 'checkboxes',
      '#description' => t('Choose the role(s) that pricing will be based on.'),
      '#options' => $weighted_roles,
    );
    if (isset($_SESSION['uc_price_per_role'])) {
      $form['price_selection_fieldset']['price_roles']['#default_value'] = $_SESSION['uc_price_per_role']['price_roles'];
    }
  }
  else {
    $form['price_selection_fieldset']['price_roles'] = array(
      '#prefix' => '<div id="uc-price-per-role-price-roles">',
      '#suffix' => '</div>',
    );
  }

  $form['price_selection_fieldset']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set pricing role(s)'),
  );

  return $form;
}

/**
 * Callback for switch form price selection.
 */
function uc_price_per_role_switch_form_callback($form, &$form_state) {
  return $form['price_selection_fieldset']['price_roles'];
}

/**
 * Form submit handler to save price role selection.
 */
function uc_price_per_role_switch_form_submit($form_id, &$form_state) {
  if (user_access('access price selection block')) {
    if (!isset($_SESSION['uc_price_per_role'])) {
      // Defaults if we've not yet saved this session
      $_SESSION['uc_price_per_role'] = array(
        'price_roles' => array(),
      );
    }
    $_SESSION['uc_price_per_role']['price_selection'] =
      $form_state['values']['price_selection'];
    if (isset($form_state['values']['price_roles'])) {
      // if user chose 'Override' we'll save new settings, but if user chose
      // 'Default' we'll keep the last set of choices for the next override.
      $_SESSION['uc_price_per_role']['price_roles'] =
        array_filter($form_state['values']['price_roles']);
    }
  }
  cache('cache_entity_node')->flush();
}

/**
 * Implements hook_user_role_delete().
 *
 * Remove orphaned database entries and weights for deleted roles.
 */
function uc_price_per_role_user_role_delete($role) {
  $config = config('uc_price_per_role.settings');
  // Remove deleted role from weights variable.
  $weights = $config->get('weights');
  unset($weights[$role->name]);
  config_set('uc_price_per_role.settings', 'weights', $weights);

  // Remove deleted role from enabled variable.
  $enabled = $config->get('enabled');
  unset($enabled[$role->name]);
  config_set('uc_price_per_role.settings', 'enabled', $enabled);

  // Remove data for deleted role from the {uc_price_per_role_prices} table.
  db_delete('uc_price_per_role_prices')
    ->condition('role', $role->name, '=')
    ->execute();

  // Remove deleted role from the {uc_price_per_role_option_prices} table.
  db_delete('uc_price_per_role_option_prices')
    ->condition('role', $role->name, '=')
    ->execute();
}

/**
 * Implements hook_autoload_info().
 */
function uc_price_per_role_autoload_info() {
  return array(
    'uc_price_per_role_handler_field_role_price' =>
      'views/uc_price_per_role_handler_field_role_price.inc',
  );
}
