<?php
/**
 * @file
 * Install/deinstall hooks for uc_price_per_role.
 */

/**
 * Implements hook_uninstall().
 */
function uc_price_per_role_uninstall() {
  config_clear('uc_price_per_role.settings', 'enabled');
  config_clear('uc_price_per_role.settings', 'weights');
}


/**
 * Implements hook_schema().
 */
function uc_price_per_role_schema() {
  $schema = array();

  $schema['uc_price_per_role_prices'] = array(
    'description' => 'Ubercart price per role',
    'fields' => array(
      'rpid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'role' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => 'The machine name of the role.',
        'not null' => TRUE,
        'default' => '',
      ),
      'price' => array(
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
    ),
    'primary key' => array('rpid'),
  );

  $schema['uc_price_per_role_option_prices'] = array(
    'description' => 'Ubercart price per role option prices',
    'fields' => array(
      'opid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'oid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'role' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => 'The machine name of the role.',
        'not null' => TRUE,
        'default' => '',
      ),
      'price' => array(
        'type' => 'numeric',
        'precision' => 16,
        'scale' => 5,
        'not null' => TRUE,
        'default' => 0.0,
      ),
    ),
    'primary key' => array('opid'),
  );

  return $schema;
}


/**
 * Implements hook_update_last_removed().
 */
function uc_price_per_role_update_last_removed() {
  return 7100;
}


/**
 * Implements hook_update_N().
 */
function uc_price_per_role_update_1000() {

  // Convert numeric rid to string keys (though Backdrop will use the old rid as
  // the key for all except anonymous and administrator roles).
  $role_column = array(
    'type' => 'varchar',
    'length' => 64,
    'description' => 'The machine name of the role.',
    'not null' => TRUE,
    'default' => '',
  );

  if (db_field_exists('uc_price_per_role_prices', 'rid')) {
    db_change_field('uc_price_per_role_prices', 'rid', 'role', $role_column);
  }
    db_query('
      UPDATE {uc_price_per_role_prices}
      SET role = :role
      WHERE role = :rid
      ', array(':rid' => 1, ':role' => BACKDROP_ANONYMOUS_ROLE));
    db_query('
      UPDATE {uc_price_per_role_prices}
      SET role = :role
      WHERE role = :rid
      ', array(':rid' => 2, ':role' => BACKDROP_AUTHENTICATED_ROLE));

  if (db_field_exists('uc_price_per_role_option_prices', 'rid')) {
    db_change_field('uc_price_per_role_option_prices', 'rid', 'role', $role_column);
  }
    db_query('
      UPDATE {uc_price_per_role_option_prices}
      SET role = :role
      WHERE role = :rid
      ', array(':rid' => 1, ':role' => BACKDROP_ANONYMOUS_ROLE));
    db_query('
      UPDATE {uc_price_per_role_option_prices}
      SET role = :role
      WHERE role = :rid
      ', array(':rid' => 2, ':role' => BACKDROP_AUTHENTICATED_ROLE));

  $config = config('uc_price_per_role.settings');

  $config->set('enabled', _uc_price_per_role_install_convert(
    update_variable_get('uc_price_per_role_enabled')));
  $config->set('weights', _uc_price_per_role_install_convert(
    update_variable_get('uc_price_per_role_weights')));

  update_variable_del('uc_price_per_role_enabled');
  update_variable_del('uc_price_per_role_weights');
}


/**
 * Convert a Drupal variable array keyed on rids to one keyed on roles.
 */
function _uc_price_per_role_install_convert($vals) {
  $new_vals = array();
  foreach ($vals as $rid => $value) {
    switch ($rid) {
      case 1:
        $new_vals[BACKDROP_ANONYMOUS_ROLE] = $vals[$rid];
        break;

      case 2:
        $new_vals[BACKDROP_AUTHENTICATED_ROLE] = $vals[$rid];
        break;

      default:
        $new_vals[(string) $rid] = $vals[$rid];
    }
  }
  return $new_vals;
}
